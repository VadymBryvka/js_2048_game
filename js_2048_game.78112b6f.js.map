{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n'use strict';\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.addRandomTile = this.addRandomTile.bind(this);\n        this.start = this.start.bind(this);\n        this.status = 'idle';\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = 'playing';\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.status = 'playing';\n                this.score = 0;\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"cellMerge\",\n            value: function cellMerge() {\n                var moved = false;\n                for(var row = 0; row < this.board.length; row++){\n                    // Видаляємо нулі (пусті комірки)\n                    var newRow = this.board[row].filter(function(value) {\n                        return value !== 0;\n                    });\n                    // Об'єднуємо сусідні плитки з однаковими значеннями\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2; // Подвоюємо значення плитки\n                        newRow[i + 1] = 0; // Очищаємо наступну плитку\n                        moved = true; // Позначаємо, що був рух\n                    }\n                    // Видаляємо нові нулі, створені після об'єднання\n                    newRow = newRow.filter(function(value) {\n                        return value !== 0;\n                    });\n                    // Додаємо нулі до кінця, щоб рядок був розміром board.length\n                    while(newRow.length < this.board[row].length)newRow.push(0);\n                    // Якщо рядок змінився, оновлюємо сітку\n                    if (this.board[row].join('') !== newRow.join('')) {\n                        this.board[row] = newRow;\n                        moved = true;\n                    }\n                }\n                return moved; // Повертаємо true, якщо плитки змістили\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.cellMerge()) this.addRandomTile();\n                this.cellMerge();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                this.rotateGrid(this.board, true); // Обертаємо на 180 градусів\n                this.rotateGrid(this.board, true);\n                var moved = this.cellMerge();\n                this.rotateGrid(this.board, false);\n                this.rotateGrid(this.board, false); // Повертаємо назад\n                if (moved) this.addRandomTile();\n                return moved;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                this.rotateGrid(this.board, false);\n                var moved = this.cellMerge();\n                this.rotateGrid(this.board, true);\n                if (moved) this.addRandomTile();\n                return moved;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                this.rotateGrid(this.board, true);\n                var moved = this.cellMerge();\n                this.rotateGrid(this.board, false);\n                if (moved) this.addRandomTile();\n                return moved;\n            }\n        },\n        {\n            key: \"rotateGrid\",\n            value: function rotateGrid(board) {\n                var clockwise = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n                var size = board.length; // Розмір сітки\n                var newBoard = Array(size).fill(null).map(function() {\n                    return Array(size).fill(0);\n                }); // порожня сітка\n                for(var row = 0; row < size; row++){\n                    for(var col = 0; col < size; col++)if (clockwise) // Обертання на 90 градусів за годинниковою стрілкою\n                    newBoard[col][size - 1 - row] = board[row][col];\n                    else // Обертання на 90 градусів проти годинникової стрілки\n                    newBoard[size - 1 - col][row] = board[row][col];\n                }\n                this.board = newBoard; // Замінюємо сітку\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                // Знаходимо всі порожні клітинки\n                for(var row = 0; row < this.board.length; row++){\n                    for(var col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    }); // Додаємо до масиву порожніх клітинок\n                }\n                // Вибираємо випадкову клітинку\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], row1 = _emptyCells_randomIndex.row, col1 = _emptyCells_randomIndex.col;\n                    // Додаємо 2 або 4 у випадкову клітинку\n                    this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                }\n                return this.board; // Повертаємо оновлену дошку\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                var table = document.querySelector('tbody');\n                table.innerHTML = '';\n                this.board.forEach(function(row) {\n                    var tr = document.createElement('tr');\n                    tr.classList.add('field-row');\n                    row.forEach(function(cell) {\n                        var td = document.createElement('td');\n                        td.textContent = cell !== 0 ? cell : '';\n                        td.classList.add('field-cell');\n                        td.setAttribute('class', \"field-cell field-cell--\".concat(cell));\n                        tr.appendChild(td);\n                    });\n                    table.appendChild(tr);\n                });\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                for(var row = 0; row < this.board.length; row++){\n                    for(var col = 0; col < this.board[row].length; col++)if (this.board[row][col] > this.score) this.score = this.board[row][col];\n                }\n                return this.score;\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                var copyOfBoard = JSON.parse(JSON.stringify(this.board));\n                for(var row = 0; row < copyOfBoard.length; row++)for(var col = 0; col < copyOfBoard[row].length - 1; col++){\n                    if (copyOfBoard[row][col + 1] === 0 || copyOfBoard[row][col] === 0 || copyOfBoard[row][col] === copyOfBoard[row][col + 1]) return true;\n                }\n                for(var col1 = 0; col1 < copyOfBoard[0].length; col1++)for(var row1 = 0; row1 < copyOfBoard.length - 1; row1++){\n                    if (copyOfBoard[row1 + 1][col1] === 0 || copyOfBoard[row1][col1] === 0 || copyOfBoard[row1][col1] === copyOfBoard[row1 + 1][col1]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                // `idle` - the game has not started yet (the initial state);\n                // * `playing` - the game is in progress;\n                // * `win` - the game is won;\n                // * `lose` - the game is lost\n                for(var row = 0; row < this.board.length; row++){\n                    for(var col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 2048) this.status = 'win';\n                }\n                if (this.status === 'playing' && !this.canMove()) this.status = 'lose';\n                return this.status;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startButton = document.querySelector('.button');\nvar $197cd56b15c33885$var$scoreButton = document.querySelector('.game-score');\nvar $197cd56b15c33885$var$startMessage = document.querySelector('.message-start');\nvar $197cd56b15c33885$var$loseMessage = document.querySelector('.message-lose');\n$197cd56b15c33885$var$startButton.addEventListener('click', function() {\n    if ($197cd56b15c33885$var$startButton.getAttribute('class') === 'button start') {\n        $197cd56b15c33885$var$startButton.setAttribute('class', 'button restart');\n        $197cd56b15c33885$var$startButton.textContent = 'Restart';\n        $197cd56b15c33885$var$startMessage.style = 'display: none';\n        $197cd56b15c33885$var$game.start();\n    } else {\n        // startButton.setAttribute('class', 'button start');\n        // startButton.textContent = 'Start';\n        $197cd56b15c33885$var$loseMessage.setAttribute('class', 'message message-lose hidden');\n        $197cd56b15c33885$var$game.restart();\n    }\n    $197cd56b15c33885$var$game.getState();\n    $197cd56b15c33885$var$game.getStatus();\n    $197cd56b15c33885$var$scoreButton.textContent = $197cd56b15c33885$var$game.getScore();\n});\ndocument.addEventListener('keydown', function(e) {\n    if ($197cd56b15c33885$var$game.getStatus() === 'playing') {\n        switch(e.key){\n            case 'ArrowLeft':\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case 'ArrowUp':\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n        }\n        $197cd56b15c33885$var$game.getState();\n        if ($197cd56b15c33885$var$game.getStatus() === 'win') document.querySelector('.message-win').setAttribute('class', 'message message-win');\n        else if ($197cd56b15c33885$var$game.getStatus() === 'lose') document.querySelector('.message-lose').setAttribute('class', 'message message-lose');\n        $197cd56b15c33885$var$scoreButton.textContent = $197cd56b15c33885$var$game.getScore();\n    }\n});\n\n})();\n//# sourceMappingURL=js_2048_game.78112b6f.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.button');\nconst scoreButton = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.getAttribute('class') === 'button start') {\n    startButton.setAttribute('class', 'button restart');\n    startButton.textContent = 'Restart';\n    startMessage.style = 'display: none';\n    game.start();\n  } else {\n    // startButton.setAttribute('class', 'button start');\n    // startButton.textContent = 'Start';\n    loseMessage.setAttribute('class', 'message message-lose hidden');\n    game.restart();\n  }\n\n  game.getState();\n  game.getStatus();\n  scoreButton.textContent = game.getScore();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n\n        break;\n    }\n\n    game.getState();\n\n    if (game.getStatus() === 'win') {\n      document\n        .querySelector('.message-win')\n        .setAttribute('class', 'message message-win');\n    } else if (game.getStatus() === 'lose') {\n      document\n        .querySelector('.message-lose')\n        .setAttribute('class', 'message message-lose');\n    }\n\n    scoreButton.textContent = game.getScore();\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(initialState) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.addRandomTile = this.addRandomTile.bind(this);\n    this.start = this.start.bind(this);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.status = 'playing';\n    this.score = 0;\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.addRandomTile();\n  }\n\n  cellMerge() {\n    let moved = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      // Видаляємо нулі (пусті комірки)\n      let newRow = this.board[row].filter((value) => value !== 0);\n\n      // Об'єднуємо сусідні плитки з однаковими значеннями\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2; // Подвоюємо значення плитки\n          newRow[i + 1] = 0; // Очищаємо наступну плитку\n          moved = true; // Позначаємо, що був рух\n        }\n      }\n\n      // Видаляємо нові нулі, створені після об'єднання\n      newRow = newRow.filter((value) => value !== 0);\n\n      // Додаємо нулі до кінця, щоб рядок був розміром board.length\n      while (newRow.length < this.board[row].length) {\n        newRow.push(0);\n      }\n\n      // Якщо рядок змінився, оновлюємо сітку\n      if (this.board[row].join('') !== newRow.join('')) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    return moved; // Повертаємо true, якщо плитки змістили\n  }\n\n  moveLeft() {\n    if (this.cellMerge()) {\n      this.addRandomTile();\n    }\n\n    this.cellMerge();\n  }\n\n  moveRight() {\n    this.rotateGrid(this.board, true); // Обертаємо на 180 градусів\n    this.rotateGrid(this.board, true);\n\n    const moved = this.cellMerge();\n\n    this.rotateGrid(this.board, false);\n    this.rotateGrid(this.board, false); // Повертаємо назад\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    return moved;\n  }\n\n  moveUp() {\n    this.rotateGrid(this.board, false);\n\n    const moved = this.cellMerge();\n\n    this.rotateGrid(this.board, true);\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    return moved;\n  }\n\n  moveDown() {\n    this.rotateGrid(this.board, true);\n\n    const moved = this.cellMerge();\n\n    this.rotateGrid(this.board, false);\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    return moved;\n  }\n\n  rotateGrid(board, clockwise = true) {\n    const size = board.length; // Розмір сітки\n    const newBoard = Array(size)\n      .fill(null)\n      .map(() => Array(size).fill(0)); // порожня сітка\n\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        if (clockwise) {\n          // Обертання на 90 градусів за годинниковою стрілкою\n          newBoard[col][size - 1 - row] = board[row][col];\n        } else {\n          // Обертання на 90 градусів проти годинникової стрілки\n          newBoard[size - 1 - col][row] = board[row][col];\n        }\n      }\n    }\n\n    this.board = newBoard; // Замінюємо сітку\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    // Знаходимо всі порожні клітинки\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col }); // Додаємо до масиву порожніх клітинок\n        }\n      }\n    }\n\n    // Вибираємо випадкову клітинку\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      // Додаємо 2 або 4 у випадкову клітинку\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n\n    return this.board; // Повертаємо оновлену дошку\n  }\n\n  getState() {\n    const table = document.querySelector('tbody');\n\n    table.innerHTML = '';\n\n    this.board.forEach((row) => {\n      const tr = document.createElement('tr');\n\n      tr.classList.add('field-row');\n\n      row.forEach((cell) => {\n        const td = document.createElement('td');\n\n        td.textContent = cell !== 0 ? cell : '';\n        td.classList.add('field-cell');\n        td.setAttribute('class', `field-cell field-cell--${cell}`);\n        tr.appendChild(td);\n      });\n\n      table.appendChild(tr);\n    });\n  }\n\n  getScore() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] > this.score) {\n          this.score = this.board[row][col];\n        }\n      }\n    }\n\n    return this.score;\n  }\n\n  canMove() {\n    const copyOfBoard = JSON.parse(JSON.stringify(this.board));\n\n    for (let row = 0; row < copyOfBoard.length; row++) {\n      for (let col = 0; col < copyOfBoard[row].length - 1; col++) {\n        if (\n          copyOfBoard[row][col + 1] === 0 ||\n          copyOfBoard[row][col] === 0 ||\n          copyOfBoard[row][col] === copyOfBoard[row][col + 1]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    for (let col = 0; col < copyOfBoard[0].length; col++) {\n      for (let row = 0; row < copyOfBoard.length - 1; row++) {\n        if (\n          copyOfBoard[row + 1][col] === 0 ||\n          copyOfBoard[row][col] === 0 ||\n          copyOfBoard[row][col] === copyOfBoard[row + 1][col]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getStatus() {\n    // `idle` - the game has not started yet (the initial state);\n    // * `playing` - the game is in progress;\n    // * `win` - the game is won;\n    // * `lose` - the game is lost\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n        }\n      }\n    }\n\n    if (this.status === 'playing' && !this.canMove()) {\n      this.status = 'lose';\n    }\n\n    return this.status;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$3d28d7f1aac198f5$exports","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","TypeError","board","addRandomTile","bind","start","status","score","key","value","moved","row","length","newRow","filter","i","push","join","cellMerge","rotateGrid","clockwise","arguments","size","newBoard","Array","fill","map","col","emptyCells","randomIndex","Math","floor","random","_emptyCells_randomIndex","row1","col1","table","document","querySelector","innerHTML","forEach","tr","createElement","classList","add","cell","td","textContent","setAttribute","concat","appendChild","copyOfBoard","JSON","parse","stringify","canMove","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","Constructor","prototype","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$scoreButton","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$loseMessage","addEventListener","getAttribute","style","restart","getState","getStatus","getScore","e","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"js_2048_game.78112b6f.js.map"}